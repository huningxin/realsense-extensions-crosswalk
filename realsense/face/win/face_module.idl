// Copyright (c) 2015 Intel Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// FaceModule interface
[dash_delimited_enum_string=true]
namespace face_module {
  enum TrackingModeType {
    color,
    color_depth
  };

  enum TrackingStrategyType {
    appearance_time,
    closest_farthest,
    farthest_closest,
    left_right,
    right_left
  };

  enum AlertType {
    new_face_detected,
    face_out_of_fov,
    face_back_to_fov,
    face_occluded,
    face_no_longer_occluded,
    face_lost
  };

  enum PixelFormat {
    rgb32,
    depth
  };

  enum LandmarkType {
    not_named,
    
    eye_right_center,
    eye_left_center,
    
    eyelid_right_top,
    eyelid_right_bottom,
    eyelid_right_right,
    eyelid_right_left,
    
    eyelid_left_top,
    eyelid_left_bottom,
    eyelid_left_right,
    eyelid_left_left,
    
    eyebrow_right_center,
    eyebrow_right_right,
    eyebrow_right_left,
    
    eyebrow_left_center,
    eyebrow_left_right,
    eyebrow_left_left,
    
    nose_tip,
    nose_top,
    nose_bottom,
    nose_right,
    nose_left,
    
    lip_right,
    lip_left,
    
    upper_lip_center,
    upper_lip_right,
    upper_lip_left,
    
    lower_lip_center,
    lower_lip_right,
    lower_lip_left,
    
    face_border_top_right,
    face_border_top_left,
    
    chin
  };

  dictionary Image {
    PixelFormat format;
    long width;
    long height;
    ArrayBuffer data;
  };

  dictionary Rect {
    long x;
    long y;
    long w;
    long h;
  };

  dictionary Point3DFloat {
    double x;
    double y;
    double z;
  };

  dictionary Point2DFloat {
    double x;
    double y;
  };

  // AlertConfiguration
  dictionary AlertConfiguration {
    boolean? newFaceDetected;
    boolean? faceOutOfFov;
    boolean? faceBackToFov;
    boolean? faceOccluded;
    boolean? faceNoLongerOccluded;
    boolean? faceLost;
  };

  // DetectionConfiguration 
  dictionary DetectionConfiguration {
    boolean? enable;
    long? maxFaces;
  };

  // LandmarksConfiguration 
  dictionary LandmarksConfiguration {
    boolean? enable;
    long? maxFaces;
    long? numLandmarks;
  };

  // RecognitionConfiguration
  dictionary RecognitionConfiguration {
    boolean? enable;
  };

  // FaceConfigurationData
  dictionary FaceConfigurationData {
    TrackingModeType? mode;
    TrackingStrategyType? strategy;
    AlertConfiguration? alert;
    DetectionConfiguration? detection;
    LandmarksConfiguration? landmarks;
    RecognitionConfiguration? recognition;
  };

  // DetectionData
  dictionary DetectionData {
    Rect boundingRect; 
    double avgDepth;
  };

  // LandmarkPoint
  dictionary LandmarkPoint {
    LandmarkType type;
    long confidenceImage;
    long confidenceWorld;
    Point3DFloat coordinateWorld;
    Point2DFloat coordinateImage;
  };

  // LandmarksData
  dictionary LandmarksData {
    LandmarkPoint[] points;
  };

  // RecognitionData
  dictionary RecognitionData {
    long userId;
  };

  // Single Face Data
  dictionary FaceData {
    long faceId;
    DetectionData? detection;
    LandmarksData? landmarks;
    RecognitionData? recognition;
  };

  dictionary ProcessedSample {
    Image? color;
    Image? depth;
    FaceData[] faces;
  };

  dictionary AlertEventData {
    AlertType typeLabel;
    long timeStamp;
    long faceId;
  };

  callback ProcessedSamplePromise = void (ProcessedSample sample);
  callback FaceConfigurationDataPromise = void (FaceConfigurationData faceConf);
  callback LongPromise = void (long value);

  interface Events {
    void onready();
    void onended();
    void onerror();
    void onprocessedsample();
    void onalert();
  };

  interface Functions {
    void setCamera(DOMString camera);

    void start();
    void stop();
    void getProcessedSample(optional boolean getColor, optional boolean getDepth, ProcessedSamplePromise promise);

    void set(FaceConfigurationData faceConf);
    void getDefaults(FaceConfigurationDataPromise promise);
    void get(FaceConfigurationDataPromise promise);

    void registerUserByFaceID(long faceId, LongPromise promise);
    void unregisterUserByID(long userId);

    [nodoc] FaceModule faceModuleConstructor(DOMString objectId);
  };
};
