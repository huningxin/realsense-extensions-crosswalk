// Copyright (c) 2016 Intel Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// HandModule interface
namespace hand_module {
  enum PixelFormat {
    RGB32,
    DEPTH
  };

  enum BodySide {
    body_side_unknown,
    body_side_left,
    body_side_right
  };

  enum TrackingStatus {
    good,
    out_of_fov,
    out_of_range,
    high_speed,
    pointing_fingers
  };

  dictionary Image {
    PixelFormat format;
    long width;
    long height;
    ArrayBuffer data;
  };

  dictionary Rect {
    long x;
    long y;
    long w;
    long h;
  };

  dictionary Point2D {
    double x;
    double y;
  };

  dictionary Point3D {
    double x;
    double y;
    double z;
  };

  dictionary Point4D {
    double x;
    double y;
    double z;
    double w;
  };

  dictionary ExtremityData {
    Point3D pointWorld;
    Point3D pointImage;
  };

  dictionary ExtremityDataPoints {
    ExtremityData closest;
    ExtremityData leftmost;
    ExtremityData rightmost;
    ExtremityData topmost;
    ExtremityData center;
  };

  dictionary FingerData {
    long folderness;
    long radius;
  };

  dictionary Fingers {
    FingerData thumb;
    FingerData index;
    FingerData middle;
    FingerData ring;
    FingerData pinky;
  };

  dictionary JointData {
    long confidence;
    Point3D positionWorld;
    Point3D positionImage;
    Point4D localRotation;
    Point4D globalOrientation;
    Point3D speed;
  };

  dictionary FingerJoints {
    JointData base;
    JointData joint1;
    JointData joint2;
    JointData tip;
  };

  dictionary Joints {
    JointData wrist;
    JointData center;
    FingerJoints thumb;
    FingerJoints index;
    FingerJoints middle;
    FingerJoints ring;
    FingerJoints pinky;
  };

  dictionary Hand {
    long uniqueId;
    double timeStamp;
    boolean calibrated;
    BodySide bodySide;
    Rect boundingBoxImage;
    Point2D massCenterImage;
    Point3D massCenterWorld;
    Point4D palmOrientation;
    double palmRadiusImage;
    double palmRadiusWorld;
    ExtremityDataPoints extremityPoints;
    Fingers fingerData;
    Joints trackedJoints;
    TrackingStatus trackingStatus;
    long openness;
    Joints normalizedJoints;
  };

  dictionary SampleProcessedEvent {
    double timeStamp;
  };

  dictionary Sample {
    double timeStamp;
    Image depth;
  };

  dictionary HandData {
    double timeStamp;
    Hand[] hands;
  };

  callback SamplePromise = void (Sample sample);
  callback HandDataPromise = void (HandData data);

  interface Events {
    void onerror();
    void onsampleprocessed();
  };

  interface Functions {
    void init();
    void start();
    void stop();

    void getSample(SamplePromise promise);
    void getHandData(HandDataPromise promise);
    
    [nodoc] HandModule handModuleConstructor(DOMString objectId);
  };
};
